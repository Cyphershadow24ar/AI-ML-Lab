# -*- coding: utf-8 -*-
"""GA2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ltxxcsDVBVC8Qq15MBW0e-0kifcNBR3k
"""

import random

# Decode chromosome (binary string -> integer)
def decode(chromosome):
    return int(chromosome, 2)

# Fitness function
def fitness(chromosome):
    x = decode(chromosome)
    return x**2

# Selection (Roulette Wheel)
def selection(population):
    total_fit = sum(fitness(ch) for ch in population)
    pick = random.uniform(0, total_fit)
    current = 0
    for ch in population:
        current += fitness(ch)
        if current > pick:
            return ch
    return population[-1]

# Crossover (Single point)
def crossover(p1, p2):
    point = random.randint(1, len(p1)-1)
    child1 = p1[:point] + p2[point:]
    child2 = p2[:point] + p1[point:]
    return child1, child2

# Mutation (Flip one bit)
def mutate(chromosome, rate=0.1):
    ch_list = list(chromosome)
    for i in range(len(ch_list)):
        if random.random() < rate:
            ch_list[i] = '1' if ch_list[i] == '0' else '0'
    return "".join(ch_list)

# GA main
def genetic_algorithm(pop_size=6, generations=5):
    # Step 1: Initialize random population of 5-bit chromosomes
    population = ["".join(random.choice("01") for _ in range(5)) for _ in range(pop_size)]

    for gen in range(generations):
        # Calculate total fitness of this round
        total_fit = sum(fitness(ch) for ch in population)
        best = max(population, key=fitness)

        print(f"Gen {gen+1}:")
        print(f"  Total Fitness = {total_fit}")
        print(f"  Best = {best} (x={decode(best)}, f(x)={fitness(best)})\n")

        # Generate next population
        new_population = []
        for _ in range(pop_size // 2):
            # Selection
            parent1 = selection(population)
            parent2 = selection(population)

            # Crossover
            child1, child2 = crossover(parent1, parent2)

            # Mutation
            child1 = mutate(child1)
            child2 = mutate(child2)

            new_population.extend([child1, child2])

        population = new_population

    # Return final best
    return max(population, key=fitness)

# Run GA
best_solution = genetic_algorithm()
print("Final Best Chromosome:", best_solution)
print("Best x:", decode(best_solution))
print("Best f(x):", fitness(best_solution))